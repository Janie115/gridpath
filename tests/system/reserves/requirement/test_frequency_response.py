#!/usr/bin/env python
# Copyright 2017 Blue Marble Analytics LLC. All rights reserved.

from __future__ import print_function

from builtins import str
from collections import OrderedDict
from importlib import import_module
import os.path
import sys
import unittest

from tests.common_functions import create_abstract_model, \
    add_components_and_load_data

TEST_DATA_DIRECTORY = \
    os.path.join(os.path.dirname(__file__), "..", "..", "..", "test_data")

# Import prerequisite modules
PREREQUISITE_MODULE_NAMES = [
    "temporal.operations.timepoints", "temporal.operations.horizons",
    "temporal.investment.periods",
    "geography.load_zones",
    "geography.frequency_response_balancing_areas",
    "project", "project.capacity.capacity", "project.fuels",
    "project.operations",
    "project.operations.reserves.frequency_response"]
NAME_OF_MODULE_BEING_TESTED = "system.reserves.requirement.frequency_response"
IMPORTED_PREREQ_MODULES = list()
for mdl in PREREQUISITE_MODULE_NAMES:
    try:
        imported_module = import_module("." + str(mdl), package="gridpath")
        IMPORTED_PREREQ_MODULES.append(imported_module)
    except ImportError:
        print("ERROR! Module " + str(mdl) + " not found.")
        sys.exit(1)
# Import the module we'll test
try:
    MODULE_BEING_TESTED = import_module("." + NAME_OF_MODULE_BEING_TESTED,
                                        package="gridpath")
except ImportError:
    print("ERROR! Couldn't import module " + NAME_OF_MODULE_BEING_TESTED +
          " to test.")


class TestFrequencyResponseRequirement(unittest.TestCase):
    """

    """
    def test_add_model_components(self):
        """
        Test that there are no errors when adding model components
        :return:
        """
        create_abstract_model(prereq_modules=IMPORTED_PREREQ_MODULES,
                              module_to_test=MODULE_BEING_TESTED,
                              test_data_dir=TEST_DATA_DIRECTORY,
                              horizon="",
                              stage=""
                              )

    def test_load_model_data(self):
        """
        Test that data are loaded with no errors
        :return:
        """
        add_components_and_load_data(prereq_modules=IMPORTED_PREREQ_MODULES,
                                     module_to_test=MODULE_BEING_TESTED,
                                     test_data_dir=TEST_DATA_DIRECTORY,
                                     horizon="",
                                     stage=""
                                     )

    def test_data_loaded_correctly(self):
        """
        Test components initialized with expected data
        :return:
        """
        m, data = add_components_and_load_data(
            prereq_modules=IMPORTED_PREREQ_MODULES,
            module_to_test=MODULE_BEING_TESTED,
            test_data_dir=TEST_DATA_DIRECTORY,
            horizon="",
            stage=""
        )
        instance = m.create_instance(data)

        # Set: FREQUENCY_RESPONSE_BA_TIMEPOINTS
        expected_ba_tmps = sorted([
            ("Zone1", 20200101),
            ("Zone1", 20200102),
            ("Zone1", 20200103),
            ("Zone1", 20200104),
            ("Zone1", 20200105),
            ("Zone1", 20200106),
            ("Zone1", 20200107),
            ("Zone1", 20200108),
            ("Zone1", 20200109),
            ("Zone1", 20200110),
            ("Zone1", 20200111),
            ("Zone1", 20200112),
            ("Zone1", 20200113),
            ("Zone1", 20200114),
            ("Zone1", 20200115),
            ("Zone1", 20200116),
            ("Zone1", 20200117),
            ("Zone1", 20200118),
            ("Zone1", 20200119),
            ("Zone1", 20200120),
            ("Zone1", 20200121),
            ("Zone1", 20200122),
            ("Zone1", 20200123),
            ("Zone1", 20200124),
            ("Zone1", 20200201),
            ("Zone1", 20200202),
            ("Zone1", 20200203),
            ("Zone1", 20200204),
            ("Zone1", 20200205),
            ("Zone1", 20200206),
            ("Zone1", 20200207),
            ("Zone1", 20200208),
            ("Zone1", 20200209),
            ("Zone1", 20200210),
            ("Zone1", 20200211),
            ("Zone1", 20200212),
            ("Zone1", 20200213),
            ("Zone1", 20200214),
            ("Zone1", 20200215),
            ("Zone1", 20200216),
            ("Zone1", 20200217),
            ("Zone1", 20200218),
            ("Zone1", 20200219),
            ("Zone1", 20200220),
            ("Zone1", 20200221),
            ("Zone1", 20200222),
            ("Zone1", 20200223),
            ("Zone1", 20200224),
            ("Zone2", 20200101),
            ("Zone2", 20200102),
            ("Zone2", 20200103),
            ("Zone2", 20200104),
            ("Zone2", 20200105),
            ("Zone2", 20200106),
            ("Zone2", 20200107),
            ("Zone2", 20200108),
            ("Zone2", 20200109),
            ("Zone2", 20200110),
            ("Zone2", 20200111),
            ("Zone2", 20200112),
            ("Zone2", 20200113),
            ("Zone2", 20200114),
            ("Zone2", 20200115),
            ("Zone2", 20200116),
            ("Zone2", 20200117),
            ("Zone2", 20200118),
            ("Zone2", 20200119),
            ("Zone2", 20200120),
            ("Zone2", 20200121),
            ("Zone2", 20200122),
            ("Zone2", 20200123),
            ("Zone2", 20200124),
            ("Zone2", 20200201),
            ("Zone2", 20200202),
            ("Zone2", 20200203),
            ("Zone2", 20200204),
            ("Zone2", 20200205),
            ("Zone2", 20200206),
            ("Zone2", 20200207),
            ("Zone2", 20200208),
            ("Zone2", 20200209),
            ("Zone2", 20200210),
            ("Zone2", 20200211),
            ("Zone2", 20200212),
            ("Zone2", 20200213),
            ("Zone2", 20200214),
            ("Zone2", 20200215),
            ("Zone2", 20200216),
            ("Zone2", 20200217),
            ("Zone2", 20200218),
            ("Zone2", 20200219),
            ("Zone2", 20200220),
            ("Zone2", 20200221),
            ("Zone2", 20200222),
            ("Zone2", 20200223),
            ("Zone2", 20200224),
            ("Zone1", 20300101),
            ("Zone1", 20300102),
            ("Zone1", 20300103),
            ("Zone1", 20300104),
            ("Zone1", 20300105),
            ("Zone1", 20300106),
            ("Zone1", 20300107),
            ("Zone1", 20300108),
            ("Zone1", 20300109),
            ("Zone1", 20300110),
            ("Zone1", 20300111),
            ("Zone1", 20300112),
            ("Zone1", 20300113),
            ("Zone1", 20300114),
            ("Zone1", 20300115),
            ("Zone1", 20300116),
            ("Zone1", 20300117),
            ("Zone1", 20300118),
            ("Zone1", 20300119),
            ("Zone1", 20300120),
            ("Zone1", 20300121),
            ("Zone1", 20300122),
            ("Zone1", 20300123),
            ("Zone1", 20300124),
            ("Zone1", 20300201),
            ("Zone1", 20300202),
            ("Zone1", 20300203),
            ("Zone1", 20300204),
            ("Zone1", 20300205),
            ("Zone1", 20300206),
            ("Zone1", 20300207),
            ("Zone1", 20300208),
            ("Zone1", 20300209),
            ("Zone1", 20300210),
            ("Zone1", 20300211),
            ("Zone1", 20300212),
            ("Zone1", 20300213),
            ("Zone1", 20300214),
            ("Zone1", 20300215),
            ("Zone1", 20300216),
            ("Zone1", 20300217),
            ("Zone1", 20300218),
            ("Zone1", 20300219),
            ("Zone1", 20300220),
            ("Zone1", 20300221),
            ("Zone1", 20300222),
            ("Zone1", 20300223),
            ("Zone1", 20300224),
            ("Zone2", 20300101),
            ("Zone2", 20300102),
            ("Zone2", 20300103),
            ("Zone2", 20300104),
            ("Zone2", 20300105),
            ("Zone2", 20300106),
            ("Zone2", 20300107),
            ("Zone2", 20300108),
            ("Zone2", 20300109),
            ("Zone2", 20300110),
            ("Zone2", 20300111),
            ("Zone2", 20300112),
            ("Zone2", 20300113),
            ("Zone2", 20300114),
            ("Zone2", 20300115),
            ("Zone2", 20300116),
            ("Zone2", 20300117),
            ("Zone2", 20300118),
            ("Zone2", 20300119),
            ("Zone2", 20300120),
            ("Zone2", 20300121),
            ("Zone2", 20300122),
            ("Zone2", 20300123),
            ("Zone2", 20300124),
            ("Zone2", 20300201),
            ("Zone2", 20300202),
            ("Zone2", 20300203),
            ("Zone2", 20300204),
            ("Zone2", 20300205),
            ("Zone2", 20300206),
            ("Zone2", 20300207),
            ("Zone2", 20300208),
            ("Zone2", 20300209),
            ("Zone2", 20300210),
            ("Zone2", 20300211),
            ("Zone2", 20300212),
            ("Zone2", 20300213),
            ("Zone2", 20300214),
            ("Zone2", 20300215),
            ("Zone2", 20300216),
            ("Zone2", 20300217),
            ("Zone2", 20300218),
            ("Zone2", 20300219),
            ("Zone2", 20300220),
            ("Zone2", 20300221),
            ("Zone2", 20300222),
            ("Zone2", 20300223),
            ("Zone2", 20300224)
        ])
        actual_ba_tmps = sorted([
            (z, tmp) for (z, tmp) in instance.FREQUENCY_RESPONSE_BA_TIMEPOINTS
        ])
        self.assertListEqual(expected_ba_tmps, actual_ba_tmps)

        # Param: frequency_response_requirement_mw
        expected_req = OrderedDict(sorted({
            ("Zone1", 20200101): 5,
            ("Zone1", 20200102): 5,
            ("Zone1", 20200103): 5,
            ("Zone1", 20200104): 5,
            ("Zone1", 20200105): 5,
            ("Zone1", 20200106): 5,
            ("Zone1", 20200107): 5,
            ("Zone1", 20200108): 5,
            ("Zone1", 20200109): 5,
            ("Zone1", 20200110): 5,
            ("Zone1", 20200111): 5,
            ("Zone1", 20200112): 5,
            ("Zone1", 20200113): 5,
            ("Zone1", 20200114): 5,
            ("Zone1", 20200115): 5,
            ("Zone1", 20200116): 5,
            ("Zone1", 20200117): 5,
            ("Zone1", 20200118): 5,
            ("Zone1", 20200119): 5,
            ("Zone1", 20200120): 5,
            ("Zone1", 20200121): 5,
            ("Zone1", 20200122): 5,
            ("Zone1", 20200123): 5,
            ("Zone1", 20200124): 5,
            ("Zone1", 20200201): 5,
            ("Zone1", 20200202): 5,
            ("Zone1", 20200203): 5,
            ("Zone1", 20200204): 5,
            ("Zone1", 20200205): 5,
            ("Zone1", 20200206): 5,
            ("Zone1", 20200207): 5,
            ("Zone1", 20200208): 5,
            ("Zone1", 20200209): 5,
            ("Zone1", 20200210): 5,
            ("Zone1", 20200211): 5,
            ("Zone1", 20200212): 5,
            ("Zone1", 20200213): 5,
            ("Zone1", 20200214): 5,
            ("Zone1", 20200215): 5,
            ("Zone1", 20200216): 5,
            ("Zone1", 20200217): 5,
            ("Zone1", 20200218): 5,
            ("Zone1", 20200219): 5,
            ("Zone1", 20200220): 5,
            ("Zone1", 20200221): 5,
            ("Zone1", 20200222): 5,
            ("Zone1", 20200223): 5,
            ("Zone1", 20200224): 5,
            ("Zone2", 20200101): 5,
            ("Zone2", 20200102): 5,
            ("Zone2", 20200103): 5,
            ("Zone2", 20200104): 5,
            ("Zone2", 20200105): 5,
            ("Zone2", 20200106): 5,
            ("Zone2", 20200107): 5,
            ("Zone2", 20200108): 5,
            ("Zone2", 20200109): 5,
            ("Zone2", 20200110): 5,
            ("Zone2", 20200111): 5,
            ("Zone2", 20200112): 5,
            ("Zone2", 20200113): 5,
            ("Zone2", 20200114): 5,
            ("Zone2", 20200115): 5,
            ("Zone2", 20200116): 5,
            ("Zone2", 20200117): 5,
            ("Zone2", 20200118): 5,
            ("Zone2", 20200119): 5,
            ("Zone2", 20200120): 5,
            ("Zone2", 20200121): 5,
            ("Zone2", 20200122): 5,
            ("Zone2", 20200123): 5,
            ("Zone2", 20200124): 5,
            ("Zone2", 20200201): 5,
            ("Zone2", 20200202): 5,
            ("Zone2", 20200203): 5,
            ("Zone2", 20200204): 5,
            ("Zone2", 20200205): 5,
            ("Zone2", 20200206): 5,
            ("Zone2", 20200207): 5,
            ("Zone2", 20200208): 5,
            ("Zone2", 20200209): 5,
            ("Zone2", 20200210): 5,
            ("Zone2", 20200211): 5,
            ("Zone2", 20200212): 5,
            ("Zone2", 20200213): 5,
            ("Zone2", 20200214): 5,
            ("Zone2", 20200215): 5,
            ("Zone2", 20200216): 5,
            ("Zone2", 20200217): 5,
            ("Zone2", 20200218): 5,
            ("Zone2", 20200219): 5,
            ("Zone2", 20200220): 5,
            ("Zone2", 20200221): 5,
            ("Zone2", 20200222): 5,
            ("Zone2", 20200223): 5,
            ("Zone2", 20200224): 5,
            ("Zone1", 20300101): 5,
            ("Zone1", 20300102): 5,
            ("Zone1", 20300103): 5,
            ("Zone1", 20300104): 5,
            ("Zone1", 20300105): 5,
            ("Zone1", 20300106): 5,
            ("Zone1", 20300107): 5,
            ("Zone1", 20300108): 5,
            ("Zone1", 20300109): 5,
            ("Zone1", 20300110): 5,
            ("Zone1", 20300111): 5,
            ("Zone1", 20300112): 5,
            ("Zone1", 20300113): 5,
            ("Zone1", 20300114): 5,
            ("Zone1", 20300115): 5,
            ("Zone1", 20300116): 5,
            ("Zone1", 20300117): 5,
            ("Zone1", 20300118): 5,
            ("Zone1", 20300119): 5,
            ("Zone1", 20300120): 5,
            ("Zone1", 20300121): 5,
            ("Zone1", 20300122): 5,
            ("Zone1", 20300123): 5,
            ("Zone1", 20300124): 5,
            ("Zone1", 20300201): 5,
            ("Zone1", 20300202): 5,
            ("Zone1", 20300203): 5,
            ("Zone1", 20300204): 5,
            ("Zone1", 20300205): 5,
            ("Zone1", 20300206): 5,
            ("Zone1", 20300207): 5,
            ("Zone1", 20300208): 5,
            ("Zone1", 20300209): 5,
            ("Zone1", 20300210): 5,
            ("Zone1", 20300211): 5,
            ("Zone1", 20300212): 5,
            ("Zone1", 20300213): 5,
            ("Zone1", 20300214): 5,
            ("Zone1", 20300215): 5,
            ("Zone1", 20300216): 5,
            ("Zone1", 20300217): 5,
            ("Zone1", 20300218): 5,
            ("Zone1", 20300219): 5,
            ("Zone1", 20300220): 5,
            ("Zone1", 20300221): 5,
            ("Zone1", 20300222): 5,
            ("Zone1", 20300223): 5,
            ("Zone1", 20300224): 5,
            ("Zone2", 20300101): 5,
            ("Zone2", 20300102): 5,
            ("Zone2", 20300103): 5,
            ("Zone2", 20300104): 5,
            ("Zone2", 20300105): 5,
            ("Zone2", 20300106): 5,
            ("Zone2", 20300107): 5,
            ("Zone2", 20300108): 5,
            ("Zone2", 20300109): 5,
            ("Zone2", 20300110): 5,
            ("Zone2", 20300111): 5,
            ("Zone2", 20300112): 5,
            ("Zone2", 20300113): 5,
            ("Zone2", 20300114): 5,
            ("Zone2", 20300115): 5,
            ("Zone2", 20300116): 5,
            ("Zone2", 20300117): 5,
            ("Zone2", 20300118): 5,
            ("Zone2", 20300119): 5,
            ("Zone2", 20300120): 5,
            ("Zone2", 20300121): 5,
            ("Zone2", 20300122): 5,
            ("Zone2", 20300123): 5,
            ("Zone2", 20300124): 5,
            ("Zone2", 20300201): 5,
            ("Zone2", 20300202): 5,
            ("Zone2", 20300203): 5,
            ("Zone2", 20300204): 5,
            ("Zone2", 20300205): 5,
            ("Zone2", 20300206): 5,
            ("Zone2", 20300207): 5,
            ("Zone2", 20300208): 5,
            ("Zone2", 20300209): 5,
            ("Zone2", 20300210): 5,
            ("Zone2", 20300211): 5,
            ("Zone2", 20300212): 5,
            ("Zone2", 20300213): 5,
            ("Zone2", 20300214): 5,
            ("Zone2", 20300215): 5,
            ("Zone2", 20300216): 5,
            ("Zone2", 20300217): 5,
            ("Zone2", 20300218): 5,
            ("Zone2", 20300219): 5,
            ("Zone2", 20300220): 5,
            ("Zone2", 20300221): 5,
            ("Zone2", 20300222): 5,
            ("Zone2", 20300223): 5,
            ("Zone2", 20300224): 5
                                          }.items()
                                              )
                                       )
        actual_req = OrderedDict(sorted({
            (z, tmp): instance.frequency_response_requirement_mw[z, tmp]
            for (z, tmp) in instance.FREQUENCY_RESPONSE_BA_TIMEPOINTS
                                              }.items()
                                            )
                                     )
        self.assertDictEqual(expected_req, actual_req)
        
        # Param: frequency_response_partial_requirement_mw
        expected_partial_req = OrderedDict(sorted({
            ("Zone1", 20200101): 2,
            ("Zone1", 20200102): 2,
            ("Zone1", 20200103): 2,
            ("Zone1", 20200104): 2,
            ("Zone1", 20200105): 2,
            ("Zone1", 20200106): 2,
            ("Zone1", 20200107): 2,
            ("Zone1", 20200108): 2,
            ("Zone1", 20200109): 2,
            ("Zone1", 20200110): 2,
            ("Zone1", 20200111): 2,
            ("Zone1", 20200112): 2,
            ("Zone1", 20200113): 2,
            ("Zone1", 20200114): 2,
            ("Zone1", 20200115): 2,
            ("Zone1", 20200116): 2,
            ("Zone1", 20200117): 2,
            ("Zone1", 20200118): 2,
            ("Zone1", 20200119): 2,
            ("Zone1", 20200120): 2,
            ("Zone1", 20200121): 2,
            ("Zone1", 20200122): 2,
            ("Zone1", 20200123): 2,
            ("Zone1", 20200124): 2,
            ("Zone1", 20200201): 2,
            ("Zone1", 20200202): 2,
            ("Zone1", 20200203): 2,
            ("Zone1", 20200204): 2,
            ("Zone1", 20200205): 2,
            ("Zone1", 20200206): 2,
            ("Zone1", 20200207): 2,
            ("Zone1", 20200208): 2,
            ("Zone1", 20200209): 2,
            ("Zone1", 20200210): 2,
            ("Zone1", 20200211): 2,
            ("Zone1", 20200212): 2,
            ("Zone1", 20200213): 2,
            ("Zone1", 20200214): 2,
            ("Zone1", 20200215): 2,
            ("Zone1", 20200216): 2,
            ("Zone1", 20200217): 2,
            ("Zone1", 20200218): 2,
            ("Zone1", 20200219): 2,
            ("Zone1", 20200220): 2,
            ("Zone1", 20200221): 2,
            ("Zone1", 20200222): 2,
            ("Zone1", 20200223): 2,
            ("Zone1", 20200224): 2,
            ("Zone2", 20200101): 2,
            ("Zone2", 20200102): 2,
            ("Zone2", 20200103): 2,
            ("Zone2", 20200104): 2,
            ("Zone2", 20200105): 2,
            ("Zone2", 20200106): 2,
            ("Zone2", 20200107): 2,
            ("Zone2", 20200108): 2,
            ("Zone2", 20200109): 2,
            ("Zone2", 20200110): 2,
            ("Zone2", 20200111): 2,
            ("Zone2", 20200112): 2,
            ("Zone2", 20200113): 2,
            ("Zone2", 20200114): 2,
            ("Zone2", 20200115): 2,
            ("Zone2", 20200116): 2,
            ("Zone2", 20200117): 2,
            ("Zone2", 20200118): 2,
            ("Zone2", 20200119): 2,
            ("Zone2", 20200120): 2,
            ("Zone2", 20200121): 2,
            ("Zone2", 20200122): 2,
            ("Zone2", 20200123): 2,
            ("Zone2", 20200124): 2,
            ("Zone2", 20200201): 2,
            ("Zone2", 20200202): 2,
            ("Zone2", 20200203): 2,
            ("Zone2", 20200204): 2,
            ("Zone2", 20200205): 2,
            ("Zone2", 20200206): 2,
            ("Zone2", 20200207): 2,
            ("Zone2", 20200208): 2,
            ("Zone2", 20200209): 2,
            ("Zone2", 20200210): 2,
            ("Zone2", 20200211): 2,
            ("Zone2", 20200212): 2,
            ("Zone2", 20200213): 2,
            ("Zone2", 20200214): 2,
            ("Zone2", 20200215): 2,
            ("Zone2", 20200216): 2,
            ("Zone2", 20200217): 2,
            ("Zone2", 20200218): 2,
            ("Zone2", 20200219): 2,
            ("Zone2", 20200220): 2,
            ("Zone2", 20200221): 2,
            ("Zone2", 20200222): 2,
            ("Zone2", 20200223): 2,
            ("Zone2", 20200224): 2,
            ("Zone1", 20300101): 2,
            ("Zone1", 20300102): 2,
            ("Zone1", 20300103): 2,
            ("Zone1", 20300104): 2,
            ("Zone1", 20300105): 2,
            ("Zone1", 20300106): 2,
            ("Zone1", 20300107): 2,
            ("Zone1", 20300108): 2,
            ("Zone1", 20300109): 2,
            ("Zone1", 20300110): 2,
            ("Zone1", 20300111): 2,
            ("Zone1", 20300112): 2,
            ("Zone1", 20300113): 2,
            ("Zone1", 20300114): 2,
            ("Zone1", 20300115): 2,
            ("Zone1", 20300116): 2,
            ("Zone1", 20300117): 2,
            ("Zone1", 20300118): 2,
            ("Zone1", 20300119): 2,
            ("Zone1", 20300120): 2,
            ("Zone1", 20300121): 2,
            ("Zone1", 20300122): 2,
            ("Zone1", 20300123): 2,
            ("Zone1", 20300124): 2,
            ("Zone1", 20300201): 2,
            ("Zone1", 20300202): 2,
            ("Zone1", 20300203): 2,
            ("Zone1", 20300204): 2,
            ("Zone1", 20300205): 2,
            ("Zone1", 20300206): 2,
            ("Zone1", 20300207): 2,
            ("Zone1", 20300208): 2,
            ("Zone1", 20300209): 2,
            ("Zone1", 20300210): 2,
            ("Zone1", 20300211): 2,
            ("Zone1", 20300212): 2,
            ("Zone1", 20300213): 2,
            ("Zone1", 20300214): 2,
            ("Zone1", 20300215): 2,
            ("Zone1", 20300216): 2,
            ("Zone1", 20300217): 2,
            ("Zone1", 20300218): 2,
            ("Zone1", 20300219): 2,
            ("Zone1", 20300220): 2,
            ("Zone1", 20300221): 2,
            ("Zone1", 20300222): 2,
            ("Zone1", 20300223): 2,
            ("Zone1", 20300224): 2,
            ("Zone2", 20300101): 2,
            ("Zone2", 20300102): 2,
            ("Zone2", 20300103): 2,
            ("Zone2", 20300104): 2,
            ("Zone2", 20300105): 2,
            ("Zone2", 20300106): 2,
            ("Zone2", 20300107): 2,
            ("Zone2", 20300108): 2,
            ("Zone2", 20300109): 2,
            ("Zone2", 20300110): 2,
            ("Zone2", 20300111): 2,
            ("Zone2", 20300112): 2,
            ("Zone2", 20300113): 2,
            ("Zone2", 20300114): 2,
            ("Zone2", 20300115): 2,
            ("Zone2", 20300116): 2,
            ("Zone2", 20300117): 2,
            ("Zone2", 20300118): 2,
            ("Zone2", 20300119): 2,
            ("Zone2", 20300120): 2,
            ("Zone2", 20300121): 2,
            ("Zone2", 20300122): 2,
            ("Zone2", 20300123): 2,
            ("Zone2", 20300124): 2,
            ("Zone2", 20300201): 2,
            ("Zone2", 20300202): 2,
            ("Zone2", 20300203): 2,
            ("Zone2", 20300204): 2,
            ("Zone2", 20300205): 2,
            ("Zone2", 20300206): 2,
            ("Zone2", 20300207): 2,
            ("Zone2", 20300208): 2,
            ("Zone2", 20300209): 2,
            ("Zone2", 20300210): 2,
            ("Zone2", 20300211): 2,
            ("Zone2", 20300212): 2,
            ("Zone2", 20300213): 2,
            ("Zone2", 20300214): 2,
            ("Zone2", 20300215): 2,
            ("Zone2", 20300216): 2,
            ("Zone2", 20300217): 2,
            ("Zone2", 20300218): 2,
            ("Zone2", 20300219): 2,
            ("Zone2", 20300220): 2,
            ("Zone2", 20300221): 2,
            ("Zone2", 20300222): 2,
            ("Zone2", 20300223): 2,
            ("Zone2", 20300224): 2
                                          }.items()
                                              )
                                       )
        actual_partial_req = OrderedDict(sorted({
            (z, tmp): instance.frequency_response_requirement_partial_mw[z,
                                                                         tmp]
            for (z, tmp) in instance.FREQUENCY_RESPONSE_BA_TIMEPOINTS
                                              }.items()
                                            )
                                     )
        self.assertDictEqual(expected_partial_req, actual_partial_req)


if __name__ == "__main__":
    unittest.main()
